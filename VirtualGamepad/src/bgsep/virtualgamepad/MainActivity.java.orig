/*
   Copyright (C) 2013  Patrik Wållgren Victor Olausson

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

 */
package bgsep.virtualgamepad;

import java.util.Observable;
import java.util.Observer;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup.LayoutParams;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ImageView;
<<<<<<< HEAD
import bgsep.bluetooth.BluetoothHandler;
=======
import android.widget.PopupMenu;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.TextView;
>>>>>>> 2148149c5506a7a377a9fb44af9ba51fcd0f4a99
import bgsep.communication.Communication;
import bgsep.model.Button;
import bluetooth.SenderImpl;

/**
 * This is the starting activity to allow a user to choose a gamepad,
 * get information/help about the app, and (dis)connect to the server  
 * @author Patrik Wållgren
 * @author Victor Olausson
 *
 */
public class MainActivity extends Activity implements Observer {

	private BluetoothHandler bh;
	private ImageView communicationIndicator, communicationButton, connectText;
	private Animation rotate;

	private PopupWindow popupMenu;
	private PopupWindow popupAbout;
	private boolean hapticFeedback;

	private boolean allowedToAutoConnect;

	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_main);
		
		ImageView 		imageNESbutton, imageGCbutton, imagePSbutton;		
		imageNESbutton = (ImageView)findViewById(R.id.mainpage_nes);
		imageGCbutton = (ImageView)findViewById(R.id.mainpage_gc);
		imagePSbutton = (ImageView)findViewById(R.id.mainpage_ps);
		communicationButton = (ImageView) findViewById(R.id.mainpage_connection_button);
		communicationIndicator = (ImageView)findViewById(R.id.mainpage_connection_indicator);
		connectText = (ImageView) findViewById(R.id.mainpage_connect_text);
		
		communicationIndicator.setVisibility(View.INVISIBLE);
		rotate = AnimationUtils.loadAnimation(this, R.anim.rotate_view);
		
		new Button(imageNESbutton, R.drawable.mainpage_nes, R.drawable.mainpage_nes_pr,
				45, this);
		new Button(imageGCbutton, R.drawable.mainpage_gc, R.drawable.mainpage_gc_pr,
				46, this);
		new Button(imagePSbutton, R.drawable.mainpage_ps, R.drawable.mainpage_ps_pr,
				47, this);
		
		bh = new BluetoothHandler(this);
		communicationButton.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				if(bh.isConnected()) {
					bh.disconnect(true);
				} else {
					allowedToAutoConnect = false;
					startBluetooth();
				}
			}
		});

		SenderImpl si = new SenderImpl(bh);
		Communication communication = Communication.getInstance();
		communication.setSender(si);
		
		hapticFeedback = false;
		
		initSettingsMenu();
		initAboutPopup();
		
		allowedToAutoConnect = true;
	}
	
	private void startBluetooth() {
		if (!bh.isStarted()) {
			Log.d("Gamepad", "BluetoothHandler is not alive, starting it..");
			indicateConnecting();
			bh.startThread();
		} else {
			Log.d("Gamepad", "disconnected from server but is alive");
		}
	}
	
	@Override
	public void update(Observable o, Object obj) {
		if(o instanceof Button) {
			Button button = (Button)o;
			Intent i;
			if(button.isPressed())
				button.getButtonView().setImageResource(button.getPressedDrawableID());			
			else {
				switch(button.getButtonID()) {
				case 45:
					i = new Intent(this, NesActivity.class);
					startActivity(i);
					break;
				case 46:
					i = new Intent(this, GcActivity.class);
					startActivity(i);
					break;
				case 47:
					i = new Intent(this, PsActivity.class);
					startActivity(i);
					break;
				default:
					break;
				}
				button.getButtonView().setImageResource(button.getUnPressedDrawableID());
			}
		}
	}
	
	@Override
	public void onDestroy() {
		super.onDestroy();
		if(popupMenu.isShowing())
			popupMenu.dismiss();
		if(popupAbout.isShowing())
			popupAbout.dismiss();
	}
	
	@Override
	public void onPause() {
		super.onPause();
		if(popupMenu.isShowing())
			popupMenu.dismiss();
		if(popupAbout.isShowing())
			popupAbout.dismiss();
	}
	
	/**
	 * Indicate to GUI that the server is not connected. 
	 */
	public void serverDisconnected() {
		if(communicationIndicator.getVisibility() == View.VISIBLE) {
			communicationIndicator.setAnimation(null);
			communicationIndicator.setVisibility(View.INVISIBLE);
		}
		communicationButton.setImageResource(R.drawable.mainpage_red_arrows);
		connectText.setVisibility(View.VISIBLE);
		connectText.setImageResource(R.drawable.mainpage_connect_text);
	}
	
	/**
	 * Indicate to GUI that the server is connected.
	 */
	public void serverConnected() {
		connectText.setVisibility(View.VISIBLE);
		connectText.setImageResource(R.drawable.mainpage_disconnect_text);
		communicationIndicator.setAnimation(null);
		communicationIndicator.setVisibility(View.INVISIBLE);
		communicationButton.setImageResource(R.drawable.mainpage_green_arrows);
		allowedToAutoConnect = true;
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (requestCode == BluetoothHandler.BLUETOOTH_REQUEST_CODE) {
			if (resultCode == RESULT_OK) {
				allowedToAutoConnect = true;
				startBluetooth();
			} else {
				allowedToAutoConnect = false;
				bh.cancelConnectionAttempt();
			}
		}
	}	
	
	private void indicateConnecting() {
		connectText.setVisibility(View.INVISIBLE);
		communicationButton.setImageResource(R.drawable.mainpage_connect_button);
		communicationIndicator.setVisibility(View.VISIBLE);
		communicationIndicator.startAnimation(rotate);
	}
	
	@Override
	public void onWindowFocusChanged(boolean has) {
		if (allowedToAutoConnect && !bh.isConnected()) {
			allowedToAutoConnect = false;
			startBluetooth();
		}
	}
	
	private void initSettingsMenu() {
		LayoutInflater layoutInflater = 
				(LayoutInflater) getBaseContext().getSystemService(LAYOUT_INFLATER_SERVICE);
		final View menuView = layoutInflater.inflate(R.layout.menu_popup, null);
		popupMenu = new PopupWindow(menuView,
				LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);

		final ImageView settingsButton = (ImageView) findViewById(R.id.mainpage_smalldots_button);
		final RelativeLayout mainLayout = (RelativeLayout) findViewById(R.id.mainpage_main_layout);
		settingsButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				ImageView anchor = (ImageView)findViewById(R.id.mainpage_menu_anchor);
				popupMenu.showAsDropDown(anchor, 0, 0);
				TextView txtAbout = (TextView)menuView.findViewById(R.id.menu_about);
				final CheckBox hapticCheckbox = (CheckBox)menuView.findViewById(R.id.menu_chkbox_haptic);
				
				txtAbout.setOnClickListener(new OnClickListener() {
					@Override
					public void onClick(View v) {
						popupAbout.showAtLocation(mainLayout, Gravity.CENTER, 0, 0);
						popupMenu.dismiss();
					}
				});
				
				hapticCheckbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
					
					@Override
					public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
						if(hapticCheckbox.isChecked())
							hapticFeedback = true;
						else
							hapticFeedback = false;
					}
				});
			}
		});
		
		// Dismiss the popupMenu when user presses anywhere on the background
		mainLayout.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if(popupMenu.isShowing())
					popupMenu.dismiss();
				if(popupAbout.isShowing())
					popupAbout.dismiss();
			}
		});
	}
	
	private void initAboutPopup() {
		LayoutInflater layoutInflater = 
				(LayoutInflater) getBaseContext().getSystemService(LAYOUT_INFLATER_SERVICE);
		final View aboutView = layoutInflater.inflate(R.layout.about_popup, null);
		popupAbout = new PopupWindow(aboutView,
				LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
		
		TextView txtInfo = (TextView)aboutView.findViewById(R.id.about_info);
		txtInfo.setMovementMethod(new ScrollingMovementMethod());
		
		android.widget.Button closeButton = (android.widget.Button)aboutView.findViewById(R.id.about_close_button);
		
		closeButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				popupAbout.dismiss();
			}
		});
	}

}
